<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[flipjs.io]]></title>
  <subtitle><![CDATA[Why isn't there ham in a hamburger?]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://flipjs.github.io/"/>
  <updated>2014-07-31T23:50:49.822Z</updated>
  <id>http://flipjs.github.io/</id>
  
  <author>
    <name><![CDATA[Felipe Apostol]]></name>
    <email><![CDATA[flipjs.io@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Finally settled using Hexo]]></title>
    <link href="http://flipjs.github.io/2014/07/29/finally-settled-using-hexo/"/>
    <id>http://flipjs.github.io/2014/07/29/finally-settled-using-hexo/</id>
    <published>2014-07-28T23:00:00.000Z</published>
    <updated>2014-07-31T11:16:00.000Z</updated>
    <content type="html"><![CDATA[<p>I have finally settled on using <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> as my static site generator. I tried a few, such as Metalsmith, Docpad, Harp, Wintersmith, Assemble, etc., but Hexo is the best by far, for my needs. Plus, it uses <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a> as default external commenting sytem. Just supply your Disqus username, and that’s it, your site has now commenting system!</p>
<p>I didn’t like the default theme that came up with Hexo. Fortunately, there are loads of themes available on Github. What you see now is based on <a href="http://sanographix.github.io/tumblr/apollo/" target="_blank" rel="external">Apollo</a> theme, designed by <a href="http://www.sanographix.net/" target="_blank" rel="external">sanographix.net</a>.</p>
<p>Next step is, to migrate my blog into Github. Haven’t checked yet how to do it in Hexo though. We’ll find out soon.</p>
]]></content>
    
    
      <category term="hexo" scheme="http://flipjs.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using object literal as switch statement]]></title>
    <link href="http://flipjs.github.io/2014/07/18/using-object-literal-as-switch-statement/"/>
    <id>http://flipjs.github.io/2014/07/18/using-object-literal-as-switch-statement/</id>
    <published>2014-07-17T23:00:00.000Z</published>
    <updated>2014-07-31T12:08:26.000Z</updated>
    <content type="html"><![CDATA[<p>I came across an article from Todd Motto about <a href="http://toddmotto.com/deprecating-the-switch-statement-for-object-literals/" target="_blank" rel="external">Replacing switch statements with Object literals</a>. It has enlightened me to force myself not to use switch statement again (unless it’s absolutely necessary). Todd Motto showed a few examples, but what interested me is the fallthrough implementation. Here is an example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> classifyShape = <span class="function"><span class="keyword">function</span><span class="params">(shape)</span> </span>{</div><div class="line"></div><div class="line">  <span class="keyword">var</span> isTriangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">  <span class="keyword">var</span> isQuadrangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">  <span class="keyword">var</span> isPentagon = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line"></div><div class="line">  <span class="keyword">var</span> shapes = {</div><div class="line">    <span class="string">'isosceles'</span>: isTriangle,</div><div class="line">    <span class="string">'rectangle'</span>: isQuadrangle,</div><div class="line">    <span class="string">'square'</span>: isQuadrangle</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> shapes[shape]()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>What if I wanted a default clause? Simple, add another clause, say ‘unknown: isUnknown’. But how would you call it if there is no case match? Good question! At first, I come up with this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> shapes[shapes.hasOwnProperty(shape) ? shape : <span class="string">'unknown'</span>]()</div></pre></td></tr></table></figure>

<p>But as Todd Motto pointed out, it involves extra function call, not to mention hasOwnProperty method has some issues. Then, I come up with this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> shapes[shapes[shape] ? shape : <span class="string">'unknown'</span>]()</div></pre></td></tr></table></figure>

<p>Just check the value, if its undefined, then call the default. Simpler. But why use ternary operator, when you can use short-circuit evaluation.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (shapes[shape] || shapes[<span class="string">'unknown'</span>])()</div></pre></td></tr></table></figure>

<p>Much simpler!</p>
<p>Here is the <a href="https://gist.github.com/flipjs/b969fb7b659de5d04e95" target="_blank" rel="external">final code</a>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> classifyShape = <span class="function"><span class="keyword">function</span><span class="params">(shape)</span> </span>{</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> isTriangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A triangle is a polygon with 3 sides.'</span>)</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> isQuadrangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A quadrangle is a polygon with 4 sides.'</span>)</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> isPentagon = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A pentagon is a polygon with 5 sides.'</span>)</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> isUnknown = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Unknown shape.'</span>)</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> shapes = {</div><div class="line">    <span class="string">'isosceles'</span>: isTriangle,</div><div class="line">    <span class="string">'rectangle'</span>: isQuadrangle,</div><div class="line">    <span class="string">'square'</span>: isQuadrangle,</div><div class="line">    <span class="string">'unknown'</span>: isUnknown</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> (shapes[shape] || shapes[<span class="string">'unknown'</span>])()</div><div class="line">  </div><div class="line">}</div><div class="line">  </div><div class="line">classifyShape(<span class="string">'square'</span>)</div><div class="line">classifyShape(<span class="string">'isosceles'</span>)</div><div class="line">classifyShape(<span class="string">'qwerty'</span>)</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
