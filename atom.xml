<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[flipjs.io]]></title>
  <subtitle><![CDATA[Why isn't there ham in a hamburger?]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://flipjs.io/"/>
  <updated>2014-09-09T03:17:14.793Z</updated>
  <id>http://flipjs.io/</id>
  
  <author>
    <name><![CDATA[Felipe Apostol]]></name>
    <email><![CDATA[flipjs.io@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AngularJS - Isolate scope properties in controller context via controllerAs]]></title>
    <link href="http://flipjs.io/2014/09/09/isolate-scope-controller-as/"/>
    <id>http://flipjs.io/2014/09/09/isolate-scope-controller-as/</id>
    <published>2014-09-09T01:37:59.000Z</published>
    <updated>2014-09-09T03:13:08.000Z</updated>
    <content type="html"><![CDATA[<p>As discussed in <a href="https://github.com/angular/angular.js/pull/7645" target="_blank" rel="external">isolate scope properties in controller context via controllerAs</a>. Topic was started sometime in May, this feature is now live in 1.3.0!</p>
<p>Since controllerAs is gaining a lot of momentum as of late, being mentioned a lot of times from many popular blogs, I’ve started to move away from using $scope in controller, whenever possible. Object.defineProperty() is also an excellent alternative to $scope.$watch.</p>
<p>Anyways, back to <strong>bindToController</strong>, here is the description from official <a href="https://docs.angularjs.org/api/ng/service/$compile" target="_blank" rel="external">AngularJS</a> site:</p>
<blockquote>
<p>“When an isolate scope is used for a component (see above), and controllerAs is used, bindToController will allow a component to have its properties bound to the controller, rather than to scope. When the controller is instantiated, the initial values of the isolate scope bindings are already available.”</p>
</blockquote>
<p>There you go. When you set controllerAs and bindtoController, your isolate scope is now bound to controller, no need to depend on $scope. You can then reference your isolate scope, say in your template or linking function, using the controllerAs, for example, ‘ctrl.iscopeProp’. It is easier to describe it by showing you the code:</p>
<script src="https://gist.github.com/3ddd5295a5843cf988bb.js"></script>

<p>In my MusicPlayerCtrl.prototype, I can reference the isolate scope properties, as if they are properties of the controller. In the linking function as well, properties can be referenced through the 4th function parameter, which is the controller.</p>
<p>Here is the view/index.html:</p>
<script src="https://gist.github.com/93419df0b65f0b3ab968.js"></script>

<p>Notice the symbol :: in expression, that is another neat feature in 1.3.x, it’s called one-time binding. You don’t need 2-way binding for all of your data in the view. Now we have this new feature, we can start implementing this for improved performance!</p>
<p><img src="/images/bindtoctrl@2x.png" alt="png image file"></p>
]]></content>
    
    
      <category term="angular" scheme="http://flipjs.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[More on Extracting Google+ Photos]]></title>
    <link href="http://flipjs.io/2014/08/08/more-on-extracting-google-plus-photos/"/>
    <id>http://flipjs.io/2014/08/08/more-on-extracting-google-plus-photos/</id>
    <published>2014-08-08T10:34:08.000Z</published>
    <updated>2014-08-09T01:34:32.000Z</updated>
    <content type="html"><![CDATA[<p>This is a follow-up on my recent post called <a href="/2014/08/07/extract-photos-from-google-plus/">Extract photos from Google Plus</a>. A close friend of mine (and Angular Guru), <strong>Ronneil</strong> at <a href="http://c0debreaker.github.io/" target="_blank" rel="external">c0debreaker.github.io</a>, suggested that we can also use an external module called <a href="https://github.com/mikeal/request" target="_blank" rel="external"><strong>request</strong></a>.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install request</div></pre></td></tr></table></figure>

<p>This is much simpler to use to make http calls, than using the core module <a href="http://nodejs.org/api/http.html" target="_blank" rel="external"><strong>http</strong></a>. See the code below:</p>
<script src="https://gist.github.com/6c24d36f0287e8e0ef7f.js"></script>

<p>See, it is much less code. The request module is doing all the work for you.</p>
<p>If you notice, I’m using iterator iife/recursion for looping. I will post another topic on that, as I need to do something else now. So, stay tuned! </p>
]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.io/tags/javascript/"/>
    
      <category term="node" scheme="http://flipjs.io/tags/node/"/>
    
      <category term="gplus" scheme="http://flipjs.io/tags/gplus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Extract photos from Google+]]></title>
    <link href="http://flipjs.io/2014/08/07/extract-photos-from-google-plus/"/>
    <id>http://flipjs.io/2014/08/07/extract-photos-from-google-plus/</id>
    <published>2014-08-07T22:38:42.000Z</published>
    <updated>2014-08-09T00:16:12.000Z</updated>
    <content type="html"><![CDATA[<p>Here is how you can extract photos from Google+ photo albums. All you need to know is the userId and albumId of a Google+ user. The data being used here are my own photos, my street photography album. You have to have node.js installed to run the code below:</p>
<script src="https://gist.github.com/ff0b605b4f67891e8c34.js"></script>

<p>The code will log out the photo url and description. You can try logging out the whole body and inspect to see all the information.</p>
<p>Here are some of the photos in the album:<br><img src="http://lh6.ggpht.com/-qEohzb-j6o0/ToBNSlnTd-I/AAAAAAAADx8/YS00Zkk3QrA/P1100450.jpg" alt="The Eye"><br><img src="http://lh6.ggpht.com/-CIaO4eMsdEw/Tnxu5BetWHI/AAAAAAAADrU/AqWGN-u4jxA/P1050525.jpg" alt="Louvre"><br><img src="http://lh5.ggpht.com/-L1-WZpG41Ww/TmCtq1ThxSI/AAAAAAAADHQ/I4fgcJ6-FMY/nik_aug_11.jpg" alt="Stairs"></p>
]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.io/tags/javascript/"/>
    
      <category term="node" scheme="http://flipjs.io/tags/node/"/>
    
      <category term="gplus" scheme="http://flipjs.io/tags/gplus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Playing with O.o()]]></title>
    <link href="http://flipjs.io/2014/08/03/playing-with-object-observe/"/>
    <id>http://flipjs.io/2014/08/03/playing-with-object-observe/</id>
    <published>2014-08-02T23:00:00.000Z</published>
    <updated>2014-08-08T23:07:08.000Z</updated>
    <content type="html"><![CDATA[<p>There is a new kid on the block that’s going to change how you write data-binding in JavaScript. It is called Object.observe(). As Addy Osmani was saying, “A revolution is coming.”</p>
<p>Unfortunately, you cannot use it yet on most browsers, if not all. I tried Safari and Firefox, it didn’t work. Even node.js has not implemented it yet. But, you can already play with it using Google Chrome.</p>
<p>Here’s the code I was playing with:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = { name : <span class="string">'flipjs'</span> }</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Start observing...'</span>)</div><div class="line"> </div><div class="line"><span class="built_in">Object</span>.observe(myObject, <span class="function"><span class="keyword">function</span><span class="params">(changes)</span> </span>{</div><div class="line">  changes.forEach(<span class="function"><span class="keyword">function</span><span class="params">(change)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'[TYPE: '</span></div><div class="line">              + change.type</div><div class="line">              + <span class="string">'] [PROPERTY: '</span></div><div class="line">              + change.name</div><div class="line">              + <span class="string">'] [NEW VALUE: '</span></div><div class="line">              + change.object[change.name]</div><div class="line">              + <span class="string">']'</span>)</div><div class="line">  })</div><div class="line">})</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(myObject)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ myObject.name = <span class="string">'john doe'</span> }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ myObject.name = <span class="string">'foo bar'</span> }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ myObject.age = <span class="number">32</span> }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ myObject.age = <span class="number">24</span> }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">delete</span> myObject.name }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="built_in">console</span>.log(myObject) }, <span class="number">1000</span>)</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(<span class="string">'End program.'</span>)</div></pre></td></tr></table></figure>

<p>Its pretty simple, actually. You just pass the object to watch, and a listener (callback), which will be called when a change has occured. In the listener, you iterate through each change, in my example, using forEach. You can check what changes has been made by inspecting the type property. It could be a property has been added, updated or deleted.</p>
<p>Here’s the result:</p>
<p><img src="/images/observe.png" alt="console"></p>
<p>As you can see, the code block has finished already (‘End program text’), but the listener has stayed in memory, and async callback will be triggered when there is a change in the object being watched.</p>
<p>I’m only scratching the surface here. The code above does nothing, but that’s how you start when you want to listen to an object mutations. There are lots of things you can do with Object.observe(). There is also Object.unobserve() actually, which unregisters your listener. Go, and play with O.o(). :)</p>
<p>I need to go to sleep now. My head hurts so badly. I will touch more on this in future posts at some point.</p>
]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text Build System for JavaScript]]></title>
    <link href="http://flipjs.io/2014/08/02/sublime-text-build-system-for-javascript/"/>
    <id>http://flipjs.io/2014/08/02/sublime-text-build-system-for-javascript/</id>
    <published>2014-08-01T23:00:00.000Z</published>
    <updated>2014-08-08T23:01:46.000Z</updated>
    <content type="html"><![CDATA[<p>Today, my daughter kicked me out of my desk because she wants to use my macbook pro. She is contented with just using the iPad, but today, she wants to play an online game with her sister and friends. She has her own computer, but it is broken for quite some time now. As for me, it’s time to use my old, trusty macbook again.</p>
<p>But alas, I didn’t have Sublime Text installed on my old macbook! I was a Textmate user before, so that was the text editor installed on it. Nothing to worry, just download Sublime Text (ST2 was used here), and install some packages.</p>
<p>I downloaded NodeJS package too, and use it as build system for JavaScript. Please note that, prior to this, I already have Node.js installed. It can be downloaded from <a href="http://nodejs.org/" target="_blank" rel="external">nodejs.org</a>. </p>
<p>Problem is, it displays nothing when I build from this package. I remember I had the same issues before, but for the life of me, I can’t remember how I solved it. Well, Google is your friend. :) I decided to just create a new build system, and leave the NodeJS package alone. From the Sublime Text menu, select Tools —&gt; Build System —&gt; New Build System:</p>
<p><img src="/images/st-new-build-system.png" alt="png image file"></p>
<p>Then, copy and paste this code:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"<span class="variable">$file</span>"</span>],</div><div class="line">  <span class="string">"selector"</span>: <span class="string">"source.js"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>And then, save it as, say “Node.sublime-build”. There is a problem though, when I execute Sublime Text from the dock or finder, it can’t find node. It could be the environment variable $PATH does not exist in finder shell or the path to node is not defined. Well, not to worry, it is an easy fix. Just prepend ‘node’ with ‘/usr/local/bin’ (or whereever it was installed) in sublime-build file:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"cmd"</span>: [<span class="string">"/usr/local/bin/node"</span>, <span class="string">"<span class="variable">$file</span>"</span>],</div><div class="line">  <span class="string">"selector"</span>: <span class="string">"source.js"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>And, that’s it!</p>
<p>As for my daughter, I should fix her computer soon. Otherwise, she will always bug me, whenever she wants to play that game again. Ok, Evernote, add it on my todo list!</p>
]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.io/tags/javascript/"/>
    
      <category term="sublime" scheme="http://flipjs.io/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Finally settled using Hexo]]></title>
    <link href="http://flipjs.io/2014/07/29/finally-settled-using-hexo/"/>
    <id>http://flipjs.io/2014/07/29/finally-settled-using-hexo/</id>
    <published>2014-07-28T23:00:00.000Z</published>
    <updated>2014-07-31T11:16:00.000Z</updated>
    <content type="html"><![CDATA[<p>I have finally settled on using <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> as my static site generator. I tried a few, such as Metalsmith, Docpad, Harp, Wintersmith, Assemble, etc., but Hexo is the best by far, for my needs. Plus, it uses <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a> as default external commenting sytem. Just supply your Disqus username, and that’s it, your site has now commenting system!</p>
<p>I didn’t like the default theme that came up with Hexo. Fortunately, there are loads of themes available on Github. What you see now is based on <a href="http://sanographix.github.io/tumblr/apollo/" target="_blank" rel="external">Apollo</a> theme, designed by <a href="http://www.sanographix.net/" target="_blank" rel="external">sanographix.net</a>.</p>
<p>Next step is, to migrate my blog into Github. Haven’t checked yet how to do it in Hexo though. We’ll find out soon.</p>
]]></content>
    
    
      <category term="hexo" scheme="http://flipjs.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using object literal as switch statement]]></title>
    <link href="http://flipjs.io/2014/07/18/using-object-literal-as-switch-statement/"/>
    <id>http://flipjs.io/2014/07/18/using-object-literal-as-switch-statement/</id>
    <published>2014-07-17T23:00:00.000Z</published>
    <updated>2014-08-08T23:03:46.000Z</updated>
    <content type="html"><![CDATA[<p>I came across an article from Todd Motto about <a href="http://toddmotto.com/deprecating-the-switch-statement-for-object-literals/" target="_blank" rel="external">Replacing switch statements with Object literals</a>. It has enlightened me to force myself not to use switch statement again (unless it’s absolutely necessary). Todd Motto showed a few examples, but what interested me is the fallthrough implementation. Here is an example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> classifyShape = <span class="function"><span class="keyword">function</span><span class="params">(shape)</span> </span>{</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> isTriangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">  <span class="keyword">var</span> isQuadrangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">  <span class="keyword">var</span> isPentagon = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> shapes = {</div><div class="line">    <span class="string">'isosceles'</span>: isTriangle,</div><div class="line">    <span class="string">'rectangle'</span>: isQuadrangle,</div><div class="line">    <span class="string">'square'</span>: isQuadrangle</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> shapes[shape]()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>What if I wanted a default clause? Simple, add another clause, say ‘unknown: isUnknown’. But how would you call it if there is no case match? Good question! At first, I come up with this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> shapes[shapes.hasOwnProperty(shape) ? shape : <span class="string">'unknown'</span>]()</div></pre></td></tr></table></figure>

<p>But as Todd Motto pointed out, it involves extra function call, not to mention hasOwnProperty method has some issues. Then, I come up with this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> shapes[shapes[shape] ? shape : <span class="string">'unknown'</span>]()</div></pre></td></tr></table></figure>

<p>Just check the value, if its undefined, then call the default. Simpler. But why use ternary operator, when you can use short-circuit evaluation.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (shapes[shape] || shapes[<span class="string">'unknown'</span>])()</div></pre></td></tr></table></figure>

<p>Much simpler!</p>
<p>Here is the <a href="https://gist.github.com/flipjs/b969fb7b659de5d04e95" target="_blank" rel="external">final code</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> classifyShape = <span class="function"><span class="keyword">function</span><span class="params">(shape)</span> </span>{</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> isTriangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A triangle is a polygon with 3 sides.'</span>)</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> isQuadrangle = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A quadrangle is a polygon with 4 sides.'</span>)</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> isPentagon = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A pentagon is a polygon with 5 sides.'</span>)</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> isUnknown = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Unknown shape.'</span>)</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> shapes = {</div><div class="line">    <span class="string">'isosceles'</span>: isTriangle,</div><div class="line">    <span class="string">'rectangle'</span>: isQuadrangle,</div><div class="line">    <span class="string">'square'</span>: isQuadrangle,</div><div class="line">    <span class="string">'unknown'</span>: isUnknown</div><div class="line">  }</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> (shapes[shape] || shapes[<span class="string">'unknown'</span>])()</div><div class="line"> </div><div class="line">}</div><div class="line"> </div><div class="line">classifyShape(<span class="string">'square'</span>)</div><div class="line">classifyShape(<span class="string">'isosceles'</span>)</div><div class="line">classifyShape(<span class="string">'qwerty'</span>)</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="javascript" scheme="http://flipjs.io/tags/javascript/"/>
    
  </entry>
  
</feed>
